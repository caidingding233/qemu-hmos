---
alwaysApply: true
description: 开发规范和最佳实践
---

# 开发规范和最佳实践

## 代码风格
- **ArkTS**: 使用PascalCase命名组件，camelCase命名属性和方法
- **C++**: 遵循LLVM风格，4空格缩进，120字符行宽限制
- **文件命名**: C++使用snake_case，ArkTS使用PascalCase

## 项目结构规范
- **UI组件**: 放在 `pages/` 和 `components/` 目录
- **业务逻辑**: 放在 `managers/` 和 `utils/` 目录
- **类型定义**: 放在 `types/` 目录
- **Native代码**: 放在 `cpp/` 目录

## 测试要求
- **UI测试**: 在 `entry/src/ohosTest/` 中进行UI冒烟测试
- **Native测试**: 通过NAPI从Index.ets调用，确认JIT/KVM标志和VM启停
- **日志验证**: 使用hilog确认功能正常运行

## 安全注意事项
- **证书管理**: 不要提交证书或密钥到版本控制
- **JIT权限**: 需要开发者证书和调试签名才能启用JIT
- **KVM探测**: 运行时探测KVM可用性，优雅降级到TCG

## 性能优化
- **内存管理**: 及时释放QEMU相关资源
- **网络优化**: 使用hostfwd实现高效的端口转发
- **显示优化**: 安装期使用VNC，日常使用RDP

## 错误处理
- **优雅降级**: KVM不可用时自动使用TCG
- **资源清理**: 应用退出时正确清理QEMU进程
- **用户反馈**: 提供清晰的错误信息和解决建议