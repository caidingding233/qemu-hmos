name: Force Fix Build

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: false

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake curl wget unzip python3 \
                              libglib2.0-dev libpixman-1-dev libssl-dev \
                              libcurl4-openssl-dev libssh-dev libgnutls28-dev \
                              libsasl2-dev libpam0g-dev libbz2-dev libzstd-dev \
                              libpcre2-dev pkg-config meson tree

    - name: Download and setup SDK
      run: |
        echo "=== Downloading SDK ==="
        curl -OL https://repo.huaweicloud.com/openharmony/os/5.1.0-Release/ohos-sdk-windows_linux-public.tar.gz
        
        echo "=== Extracting SDK ==="
        tar -xzf ohos-sdk-windows_linux-public.tar.gz
        rm ohos-sdk-windows_linux-public.tar.gz
        rm -rf ohos-sdk/{ohos,windows}
        
        echo "=== Processing SDK ==="
        cd ohos-sdk/linux
        
        # Extract files one by one
        find . -type f -name "*.zip" | while read -r file; do
          echo "Extracting: $file"
          if unzip -q "$file"; then
            rm "$file"
          fi
        done
        
        cd ../..
        
        echo "=== Complete SDK Analysis ==="
        echo "Root structure:"
        ls -la ohos-sdk/linux/
        
        echo ""
        echo "All clang files:"
        find ohos-sdk/linux -name "*clang*" -type f
        
        echo ""
        echo "All executable files in bin directories:"
        find ohos-sdk/linux -name "bin" -type d -exec ls -la {} \;
        
        echo ""
        echo "Looking for target compiler specifically:"
        find ohos-sdk/linux -name "aarch64-unknown-linux-ohos-clang" -type f

    - name: Force create compiler symlinks
      run: |
        echo "=== Force Creating Compiler Environment ==="
        
        # Find any clang that looks like it could be our target
        FOUND_CLANG=$(find ohos-sdk/linux -name "*clang*" -type f | grep -E "(aarch64|arm64|ohos)" | head -1)
        
        if [ -z "$FOUND_CLANG" ]; then
          echo "❌ No suitable clang found, trying any clang"
          FOUND_CLANG=$(find ohos-sdk/linux -name "*clang*" -type f | head -1)
        fi
        
        if [ -z "$FOUND_CLANG" ]; then
          echo "❌ No clang found at all"
          exit 1
        fi
        
        echo "Found clang: $FOUND_CLANG"
        
        # Get the directory containing this clang
        CLANG_DIR=$(dirname "$FOUND_CLANG")
        
        # Create a standard structure
        mkdir -p sdk-fixed/native/llvm/bin
        mkdir -p sdk-fixed/sysroot
        
        # Copy all tools from the found directory
        cp -r "$CLANG_DIR"/* sdk-fixed/native/llvm/bin/ || echo "Copy failed, trying individual files"
        
        # Ensure we have the target compiler name
        if [ ! -f "sdk-fixed/native/llvm/bin/aarch64-unknown-linux-ohos-clang" ]; then
          # Try to find and copy the right compiler
          TARGET_CLANG=$(find ohos-sdk/linux -name "*clang*" -type f | grep -E "aarch64.*ohos" | head -1)
          if [ -n "$TARGET_CLANG" ]; then
            cp "$TARGET_CLANG" sdk-fixed/native/llvm/bin/aarch64-unknown-linux-ohos-clang
          else
            # Create a symlink to any clang we found
            ln -sf "$(basename "$FOUND_CLANG")" sdk-fixed/native/llvm/bin/aarch64-unknown-linux-ohos-clang
          fi
        fi
        
        # Try to find and copy sysroot
        SYSROOT_DIR=$(find ohos-sdk/linux -name "sysroot" -type d | head -1)
        if [ -n "$SYSROOT_DIR" ]; then
          echo "Found sysroot: $SYSROOT_DIR"
          cp -r "$SYSROOT_DIR"/* sdk-fixed/sysroot/ || echo "Sysroot copy failed"
        fi
        
        # Set up environment
        export OHOS_NDK_HOME="$(pwd)/sdk-fixed/native"
        export SYSROOT="$(pwd)/sdk-fixed/sysroot"
        export CC="$(pwd)/sdk-fixed/native/llvm/bin/aarch64-unknown-linux-ohos-clang"
        export CXX="$(pwd)/sdk-fixed/native/llvm/bin/aarch64-unknown-linux-ohos-clang++"
        
        echo "=== Final Environment ==="
        echo "OHOS_NDK_HOME: $OHOS_NDK_HOME"
        echo "SYSROOT: $SYSROOT"
        echo "CC: $CC"
        
        echo ""
        echo "=== Testing Compiler ==="
        if [ -f "$CC" ]; then
          echo "✅ Compiler exists"
          file "$CC"
          "$CC" --version 2>&1 | head -3 || echo "Version check failed"
        else
          echo "❌ Compiler not found at: $CC"
        fi
        
        # Save environment for next step
        echo "OHOS_NDK_HOME=$OHOS_NDK_HOME" >> $GITHUB_ENV
        echo "SYSROOT=$SYSROOT" >> $GITHUB_ENV
        echo "CC=$CC" >> $GITHUB_ENV
        echo "CXX=$CXX" >> $GITHUB_ENV

    - name: Test QEMU Configure
      run: |
        echo "=== Testing QEMU Configure ==="
        cd third_party/qemu
        
        mkdir -p test_build
        cd test_build
        
        echo "Environment check:"
        echo "CC: $CC"
        echo "CXX: $CXX"
        echo "SYSROOT: $SYSROOT"
        
        if [ -f "$CC" ]; then
          echo "✅ CC exists"
        else
          echo "❌ CC not found: $CC"
          exit 1
        fi
        
        echo ""
        echo "=== Running Configure ==="
        ../configure \
          --target-list=aarch64-softmmu \
          --cc="$CC" \
          --cxx="$CXX" \
          --host-cc="/usr/bin/cc" \
          --cross-prefix="" \
          --extra-cflags="-target aarch64-unknown-linux-ohos --sysroot=${SYSROOT}" \
          --extra-ldflags="-target aarch64-unknown-linux-ohos --sysroot=${SYSROOT}" \
          -Db_staticpic=true \
          -Db_pie=false \
          -Ddefault_library=static \
          -Dtools=disabled \
          --enable-tcg \
          --disable-kvm \
          --disable-xen \
          --disable-werror
        
        echo "✅ Configure completed successfully!"
