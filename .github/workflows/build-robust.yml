name: Build QEMU for HarmonyOS (Robust)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-24.04
    
    steps:
    - name: Checkout (with submodules)
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install minimal deps (host tools only)
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential curl wget unzip python3 \
                                ninja-build meson pkg-config git ca-certificates

    - name: Download HarmonyOS/OpenHarmony NDK (linux)
      run: |
        set -e
        urls=(
          "https://repo.huaweicloud.com/openharmony/os/5.1.0-Release/ohos-sdk-windows_linux-public.tar.gz"
          "https://repo.huaweicloud.com/openharmony/os/5.0.0-Release/ohos-sdk-windows_linux-public.tar.gz"
          "https://repo.huaweicloud.com/openharmony/os/4.1.0-Release/ohos-sdk-windows_linux-public.tar.gz"
        )
        for u in "${urls[@]}"; do
          echo "Try $u"
          if curl -L --retry 3 -o ohos-sdk.tar.gz "$u"; then
            break
          fi
        done
        tar -xzf ohos-sdk.tar.gz
        rm -f ohos-sdk.tar.gz
        # 仅保留 linux 目录
        rm -rf ohos-sdk/ohos ohos-sdk/windows || true
        ls -la ohos-sdk/linux

    - name: Locate native toolchain (clang & sysroot)
      id: ndk
      run: |
        set -e
        cd ohos-sdk/linux
        # 找 native 包
        zip=$(find . -type f -name "*native*linux*x64*.zip" -o -name "*native*linux*.zip" | head -1)
        [ -n "$zip" ] || { echo "No native SDK zip found"; exit 1; }
        unzip -q "$zip"
        rm -f "$zip"

        native_dir=$(find . -maxdepth 1 -type d -name "native-*" -o -name "*native*" | head -1)
        [ -n "$native_dir" ] || { echo "No native dir"; exit 1; }

        llvm_bin="$PWD/$native_dir/llvm/bin"
        sysroot="$PWD/$native_dir/sysroot"

        # 优先使用带 triple 的编译器
        if [ -x "$llvm_bin/aarch64-unknown-linux-ohos-clang" ]; then
          cc="$llvm_bin/aarch64-unknown-linux-ohos-clang"
          cxx="$llvm_bin/aarch64-unknown-linux-ohos-clang++"
        else
          cc="$llvm_bin/clang"
          cxx="$llvm_bin/clang++"
        fi

        echo "OHOS_NDK_HOME=$PWD/$native_dir" >> $GITHUB_ENV
        echo "SYSROOT=$sysroot" >> $GITHUB_ENV
        echo "CC=$cc" >> $GITHUB_ENV
        echo "CXX=$cxx" >> $GITHUB_ENV
        echo "AR=$llvm_bin/llvm-ar" >> $GITHUB_ENV
        echo "RANLIB=$llvm_bin/llvm-ranlib" >> $GITHUB_ENV
        echo "STRIP=$llvm_bin/llvm-strip" >> $GITHUB_ENV

        echo "ndk_dir=$native_dir" >> $GITHUB_OUTPUT

    - name: Prepare Meson cross file
      run: |
        set -e
        mkdir -p cross
        cat > cross/aarch64-ohos.ini <<EOF
        [binaries]
        c = '${CC}'
        cpp = '${CXX}'
        ar = '${AR}'
        strip = '${STRIP}'
        pkgconfig = 'pkg-config'
        ld = '${CC}'

        [host_machine]
        system = 'linux'
        cpu_family = 'aarch64'
        cpu = 'armv8'
        endian = 'little'

        [paths]
        sys_root = '${SYSROOT}'

        [built-in options]
        c_args = ['--sysroot=${SYSROOT}','-fPIC','-O2','-pipe','-fvisibility=hidden']
        cpp_args = ['--sysroot=${SYSROOT}','-fPIC','-O2','-pipe','-fvisibility=hidden']
        c_link_args = ['--sysroot=${SYSROOT}']
        cpp_link_args = ['--sysroot=${SYSROOT}']
        EOF
        echo "Cross file written to: $GITHUB_WORKSPACE/cross/aarch64-ohos.ini"
        ls -la cross
        echo "Preview:"
        sed -n '1,25p' cross/aarch64-ohos.ini

    - name: Provide subprojects (glib/pcre2/libffi/pixman via wraps)
      run: |
        set -e
        cd third_party/qemu
        mkdir -p subprojects
        # 用 wrapdb 安装依赖（交叉编译时 Meson 会按 cross file 构建）
        meson wrap install glib
        meson wrap install pcre2
        meson wrap install libffi
        meson wrap install pixman
        # 保险：若网络抖，可重复尝试
        ls -la subprojects

    - name: Build QEMU (鸿蒙版 UTM - ARM + X86 多目标)
      run: |
        set -e
        CROSS_FILE="$GITHUB_WORKSPACE/cross/aarch64-ohos.ini"
        echo "Using CROSS_FILE=$CROSS_FILE"
        if [ ! -f "$CROSS_FILE" ]; then
          echo "::error::Cross file not found at $CROSS_FILE"
          ls -la "$GITHUB_WORKSPACE" || true
          ls -la "$GITHUB_WORKSPACE/cross" || true
          exit 1
        fi
        cd third_party/qemu
        rm -rf build && mkdir build && cd build
        
        # 鸿蒙版 UTM 多目标构建：ARM + X86 一次搞定
        meson setup \
          --cross-file="$CROSS_FILE" \
          --default-library=static \
          -Dtarget_list="aarch64-softmmu,x86_64-softmmu,i386-softmmu" \
          -Dcc="${CC}" \
          -Dcxx="${CXX}" \
          -Dhost_cc="/usr/bin/cc" \
          -Dc_args="--sysroot=${SYSROOT} -fPIC -march=armv8-a" \
          -Dc_link_args="--sysroot=${SYSROOT}" \
          -Dcpp_args="--sysroot=${SYSROOT} -fPIC -march=armv8-a" \
          -Dcpp_link_args="--sysroot=${SYSROOT}" \
          -Dgnutls=disabled \
          -Dgtk=disabled -Dsdl=disabled -Dcurses=disabled -Dvte=disabled \
          -Dbrlapi=disabled -Dspice=disabled -Dlibssh=disabled \
          -Dnettle=disabled -Dgcrypt=disabled \
          -Dslirp=enabled \
          -Dvnc=enabled \
          -Dwrap_mode=forcefallback \
          -Dtools=disabled \
          -Ddocs=disabled \
          -Dtests=disabled \
          -Dfdt=internal \
          -Dpixman=internal \
          -Dglib=internal \
          -Dpcre2=internal \
          -Dlibffi=internal \
          ..

        # 构建所有目标
        ninja -v -j"$(nproc)"

        # 产物检查 - 鸿蒙版 UTM 多架构支持
        echo "=== 构建产物检查 ==="
        file qemu-system-aarch64 || true
        file qemu-system-x86_64 || true  
        file qemu-system-i386 || true
        ls -lh qemu-system-*

        # 创建统一的 libqemu_full.so（优先 ARM，兼容 X86）
        cp qemu-system-aarch64 libqemu_full.so
        echo "=== 鸿蒙版 UTM 产物 ==="
        ls -lh libqemu_full.so
        file libqemu_full.so

    - name: Upload artifacts (鸿蒙版 UTM 多架构产物)
      uses: actions/upload-artifact@v4
      with:
        name: qemu-hmos-utm-multiarch
        path: |
          third_party/qemu/build/qemu-system-aarch64
          third_party/qemu/build/qemu-system-x86_64
          third_party/qemu/build/qemu-system-i386
          third_party/qemu/build/libqemu_full.so
        retention-days: 30