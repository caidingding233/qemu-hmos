name: Build QEMU SO Libraries for HarmonyOS

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'third_party/qemu/**'
      - 'entry/src/main/cpp/**'
      - '.github/workflows/build-qemu-so.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'third_party/qemu/**'
      - 'entry/src/main/cpp/**'
      - '.github/workflows/build-qemu-so.yml'
  workflow_dispatch:
  workflow_call:

jobs:
  build-qemu-so:
    runs-on: self-hosted
    timeout-minutes: 60
    
    outputs:
      so-artifact-name: ${{ steps.build.outputs.artifact-name }}
      so-version: ${{ steps.build.outputs.version }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: false
        
    - name: Download and setup HarmonyOS SDK
      run: |
        echo "=== Downloading HarmonyOS SDK ==="
        # 安装必要的工具
        sudo apt-get update
        sudo apt-get install -y unzip file

        # 使用HarmonyOS Next官方下载链接
        SDK_URLS=(
          "https://repo.huaweicloud.com/harmonyos/os/6.0-Release/ohos-sdk-windows_linux-public.tar.gz"
          "https://repo.huaweicloud.com/harmonyos/os/5.1.0-Release/ohos-sdk-windows_linux-public.tar.gz"
          "https://repo.huaweicloud.com/harmonyos/os/5.0.1-Release/ohos-sdk-windows_linux-public.tar.gz"
        )
        
        for url in "${SDK_URLS[@]}"; do
          echo "Trying: $url"
          if curl -L --retry 3 --fail -o harmonyos-sdk.tar.gz "$url"; then
            echo "✅ SDK downloaded successfully from: $url"
            break
          else
            echo "❌ Failed to download from: $url"
            rm -f harmonyos-sdk.tar.gz
          fi
        done
        
        if [ ! -f "harmonyos-sdk.tar.gz" ]; then
          echo "❌ All SDK download attempts failed"
          exit 1
        fi
        
        echo "=== Extracting SDK ==="
        # 检查文件类型并相应解压
        echo "File type info:"
        file harmonyos-sdk.tar.gz

        if [[ "$(file harmonyos-sdk.tar.gz)" == *"gzip"* ]]; then
          echo "Extracting with gzip support..."
          tar -xzf harmonyos-sdk.tar.gz
        else
          echo "Extracting as plain tar..."
          tar -xf harmonyos-sdk.tar.gz
        fi

        echo "=== Extraction complete ==="
        echo "Directory structure after extraction:"
        ls -la | head -20
        echo ""
        echo "Looking for SDK-related directories:"
        find . -maxdepth 2 -name "*ohos*" -o -name "*harmonyos*" -o -name "*sdk*" -o -name "*native*" -type d

        # 检查是否需要解压内部的zip文件
        if [ -d "linux" ]; then
          echo "=== Checking for nested zip files ==="
          cd linux
          # 找到native相关的zip文件
          NATIVE_ZIP=$(ls native-linux-x64-*.zip 2>/dev/null | head -1)
          if [ -n "$NATIVE_ZIP" ]; then
            echo "Found native zip: $NATIVE_ZIP"
            echo "=== Extracting native SDK ==="
            unzip -q "$NATIVE_ZIP"
            rm "$NATIVE_ZIP"  # 清理zip文件
            cd ..
            echo "✅ Native SDK extracted"
          else
            echo "No native zip files found in linux directory"
            cd ..
          fi
        fi
        
        # 查找native目录 - 根据HarmonyOS SDK结构查找
        NATIVE_DIR=""
        if [ -d "linux/native" ]; then
          NATIVE_DIR="linux/native"
          echo "Found native directory: $NATIVE_DIR"
        elif [ -d "ohos-sdk/linux/native" ]; then
          NATIVE_DIR="ohos-sdk/linux/native"
          echo "Found native directory: $NATIVE_DIR"
        elif [ -d "native" ]; then
          # 检查是否为真正的HarmonyOS SDK native目录
          if [ -d "native/bin" ] && [ -d "native/sysroot" ]; then
            NATIVE_DIR="native"
            echo "Found native directory: $NATIVE_DIR"
          else
            echo "⚠️ Found native directory but structure incomplete, continuing search..."
          fi
        fi

        # 最后的查找，确保不误找源码目录
        if [ -z "$NATIVE_DIR" ]; then
          echo "❌ No valid HarmonyOS SDK native directory found"
          echo "Available directories after extraction:"
          ls -la | head -20
          echo ""
          echo "Looking for native directories:"
          find . -maxdepth 3 -name "native" -type d | grep -v -E "(qemu|third_party|\.git)" | head -10
          exit 1
        fi
        
        # 确保native目录存在且包含必要文件
        if [ ! -d "$NATIVE_DIR/bin" ] || [ ! -d "$NATIVE_DIR/sysroot" ]; then
          echo "❌ Native directory structure incomplete"
          echo "Contents of $NATIVE_DIR:"
          ls -la "$NATIVE_DIR"
          exit 1
        fi
        
        export SYSROOT="$(pwd)/$NATIVE_DIR/sysroot"
        export CC="$(pwd)/$NATIVE_DIR/bin/aarch64-unknown-linux-ohos-clang"
        export CXX="$(pwd)/$NATIVE_DIR/bin/aarch64-unknown-linux-ohos-clang++"
        export STRIP="$(pwd)/$NATIVE_DIR/bin/aarch64-unknown-linux-ohos-strip"
        
        # 如果找不到特定编译器，使用通用clang
        if [ ! -f "$CC" ]; then
          CC="$(pwd)/$NATIVE_DIR/bin/clang"
          CXX="$(pwd)/$NATIVE_DIR/bin/clang++"
        fi
        
        # 验证编译器存在
        if [ ! -f "$CC" ]; then
          echo "❌ No suitable compiler found in $NATIVE_DIR/bin"
          echo "Available compilers:"
          ls -la "$NATIVE_DIR/bin/" | grep -E "(clang|gcc)"
          exit 1
        fi
        
        echo "=== SDK Setup Complete ==="
        echo "SYSROOT: $SYSROOT"
        echo "CC: $CC"
        echo "CXX: $CXX"
        
    - name: Setup Python environment
      run: |
        echo "=== Setting up Python environment ==="
        # 创建虚拟环境避免PEP 668限制
        python3 -m venv venv
        source venv/bin/activate
        
        # 安装必要的Python包
        pip install --upgrade pip
        pip install meson ninja
        
        # 验证安装
        meson --version
        ninja --version
        
        echo "✅ Python environment ready"
        
    - name: Build QEMU static library
      id: build
      run: |
        echo "=== Building QEMU ==="
        # 激活Python虚拟环境
        source venv/bin/activate
        
        cd third_party/qemu
        
        # 清理之前的构建
        rm -rf build
        mkdir build
        cd build
        
        # Windows虚拟机网络配置 - 支持Microsoft在线服务
        ../configure \
          --target-list=aarch64-softmmu \
          --cross-prefix=aarch64-unknown-linux-ohos- \
          --cc="$CC" \
          --host-cc="/usr/bin/cc" \
          --extra-cflags="-target aarch64-unknown-linux-ohos --sysroot=$SYSROOT -Wno-error=typedef-redefinition -Wno-error=macro-redefined" \
          --extra-ldflags="-target aarch64-unknown-linux-ohos --sysroot=$SYSROOT" \
          --enable-tcg \
          --enable-vnc \
          --enable-slirp \
          --enable-curl \
          --disable-kvm \
          --disable-xen \
          --disable-werror \
          --disable-libssh \
          --disable-gnutls \
          --disable-nettle \
          --disable-gcrypt \
          --disable-gtk --disable-sdl --disable-curses --disable-vte \
          --disable-brlapi --disable-spice \
          --disable-plugins \
          --disable-pixman \
          --disable-system \
          -Dwrap_mode=forcefallback \
          -Ddefault_library=static \
          -Db_staticpic=true \
          -Dvhost_user=disabled \
          -Dvhost_user_blk_server=disabled \
          -Dlibvduse=disabled \
          -Dvduse_blk_export=disabled \
          -Dvhost_net=disabled \
          -Dvhost_kernel=disabled \
          -Dkeyring=disabled \
          -Dzstd=disabled \
          -Dguest_agent=disabled \
          -Dtools=disabled
        
        # 构建
        ninja -j$(nproc)
        
        # 验证构建结果
        if [ ! -f "libqemu-aarch64-softmmu.a" ]; then
          echo "❌ QEMU aarch64 static library not found"
          exit 1
        fi
        echo "✅ QEMU ARM64 build successful"
        
    - name: Create QEMU shared library
      run: |
        echo "=== Creating libqemu_full.so ==="
        cd third_party/qemu/build
        $CXX -shared -fPIC -Wl,--no-undefined \
          -target aarch64-unknown-linux-ohos --sysroot=$SYSROOT \
          -Wl,--whole-archive \
          libqemu-aarch64-softmmu.a \
          libqemuutil.a \
          -Wl,--no-whole-archive \
          -lpthread -ldl -lm -lcurl -lssl -lcrypto \
          -o libqemu_full.so
        if [ ! -f "libqemu_full.so" ]; then
          echo "❌ Shared library creation failed"
          exit 1
        fi
        $STRIP -S libqemu_full.so
        echo "✅ libqemu_full.so created (size: $(du -h libqemu_full.so | cut -f1))"
        
    - name: Build HarmonyOS NAPI wrapper
      run: |
        echo "=== Building HarmonyOS NAPI wrapper ==="
        # 激活Python虚拟环境
        source venv/bin/activate
        
        cd entry/src/main/cpp
        
        # 设置环境变量 - 使用之前确定的NATIVE_DIR
        export SYSROOT="$(pwd)/../../../../$NATIVE_DIR/sysroot"
        export CC="$(pwd)/../../../../$NATIVE_DIR/bin/aarch64-unknown-linux-ohos-clang"
        export CXX="$(pwd)/../../../../$NATIVE_DIR/bin/aarch64-unknown-linux-ohos-clang++"
        
        if [ ! -f "$CC" ]; then
          CC="$(pwd)/../../../../$NATIVE_DIR/bin/clang"
          CXX="$(pwd)/../../../../$NATIVE_DIR/bin/clang++"
        fi
        
        # 创建构建目录
        mkdir -p build
        cd build
        
        # 配置CMake
        cmake .. \
          -DCMAKE_TOOLCHAIN_FILE=../../../../native/cmake/ohos.toolchain.cmake \
          -DOHOS_ARCH=arm64-v8a \
          -DOHOS_PLATFORM=OHOS \
          -DCMAKE_BUILD_TYPE=Release
        
        # 构建
        make -j$(nproc)
        
        if [ ! -f "libqemu_hmos.so" ]; then
          echo "❌ NAPI wrapper build failed"
          exit 1
        fi
        echo "✅ libqemu_hmos.so created (size: $(du -h libqemu_hmos.so | cut -f1))"
        
    - name: Prepare SO artifacts
      run: |
        echo "=== Preparing SO artifacts ==="
        mkdir -p artifacts/libs/arm64-v8a
        
        # 复制SO文件
        cp third_party/qemu/build/libqemu_full.so artifacts/libs/arm64-v8a/
        cp entry/src/main/cpp/build/libqemu_hmos.so artifacts/libs/arm64-v8a/
        
        # 创建版本信息
        echo "QEMU SO Libraries Build" > artifacts/VERSION.txt
        echo "Build Date: $(date)" >> artifacts/VERSION.txt
        echo "Commit: ${{ github.sha }}" >> artifacts/VERSION.txt
        echo "Branch: ${{ github.ref_name }}" >> artifacts/VERSION.txt
        
        # 列出文件
        echo "=== Artifacts Contents ==="
        find artifacts -type f -exec ls -lh {} \;
        
    - name: Upload SO artifacts
      uses: actions/upload-artifact@v4
      with:
        name: qemu-so-libraries-${{ github.sha }}
        path: artifacts/
        retention-days: 30
        
    - name: Set outputs
      run: |
        echo "artifact-name=qemu-so-libraries-${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "version=${{ github.sha }}" >> $GITHUB_OUTPUT
