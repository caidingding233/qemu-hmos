name: Build QEMU-HMOS (Simplified)

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-24.04
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Update submodules
      run: |
        git submodule update --init --recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake curl wget unzip python3 \
                              libglib2.0-dev libpixman-1-dev libssl-dev \
                              libcurl4-openssl-dev libssh-dev libgnutls28-dev \
                              libsasl2-dev libpam0g-dev libbz2-dev libzstd-dev \
                              libpcre2-dev pkg-config meson tree \
                              binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu \
                              libc6-dev libc6-dev-arm64-cross

    - name: Download HarmonyOS NDK
      run: |
        echo "=== 下载HarmonyOS NDK ==="
        # 使用稳定的NDK下载链接
        NDK_URL="https://repo.huaweicloud.com/openharmony/os/5.1.0-Release/ohos-sdk-windows_linux-public.tar.gz"
        
        if ! curl -L -o ohos-sdk.tar.gz "$NDK_URL"; then
          echo "❌ NDK下载失败"
          exit 1
        fi
        
        echo "✅ NDK下载成功"
        tar -xzf ohos-sdk.tar.gz
        rm ohos-sdk.tar.gz
        
        # 查找native SDK
        NATIVE_ZIP=$(find ohos-sdk/linux -name "*native*.zip" | head -1)
        if [ -z "$NATIVE_ZIP" ]; then
          echo "❌ 未找到native SDK"
          exit 1
        fi
        
        echo "找到native SDK: $NATIVE_ZIP"
        cd ohos-sdk/linux
        unzip -q "$NATIVE_ZIP"
        rm "$NATIVE_ZIP"
        
        # 查找native目录
        NATIVE_DIR=$(find . -name "*native*" -type d | head -1)
        if [ -z "$NATIVE_DIR" ]; then
          echo "❌ 未找到native目录"
          exit 1
        fi
        
        echo "✅ Native目录: $NATIVE_DIR"
        echo "NATIVE_DIR=$NATIVE_DIR" >> $GITHUB_ENV

    - name: Setup environment
      run: |
        cd ohos-sdk/linux
        export OHOS_NDK_HOME="$(pwd)/$NATIVE_DIR"
        export SYSROOT="$(pwd)/$NATIVE_DIR/sysroot"
        
        # 查找编译器
        CC_CANDIDATES=(
          "$(pwd)/$NATIVE_DIR/llvm/bin/aarch64-unknown-linux-ohos-clang"
          "$(pwd)/$NATIVE_DIR/llvm/bin/clang"
          "$(pwd)/$NATIVE_DIR/bin/aarch64-unknown-linux-ohos-clang"
          "$(pwd)/$NATIVE_DIR/bin/clang"
        )
        
        CC=""
        for candidate in "${CC_CANDIDATES[@]}"; do
          if [ -f "$candidate" ]; then
            CC="$candidate"
            break
          fi
        done
        
        if [ -z "$CC" ]; then
          echo "❌ 未找到编译器"
          exit 1
        fi
        
        CXX_CANDIDATES=(
          "$(pwd)/$NATIVE_DIR/llvm/bin/aarch64-unknown-linux-ohos-clang++"
          "$(pwd)/$NATIVE_DIR/llvm/bin/clang++"
          "$(pwd)/$NATIVE_DIR/bin/aarch64-unknown-linux-ohos-clang++"
          "$(pwd)/$NATIVE_DIR/bin/clang++"
        )
        
        CXX=""
        for candidate in "${CXX_CANDIDATES[@]}"; do
          if [ -f "$candidate" ]; then
            CXX="$candidate"
            break
          fi
        done
        
        if [ -z "$CXX" ]; then
          CXX="$CC"
        fi
        
        echo "OHOS_NDK_HOME=$OHOS_NDK_HOME" >> $GITHUB_ENV
        echo "SYSROOT=$SYSROOT" >> $GITHUB_ENV
        echo "CC=$CC" >> $GITHUB_ENV
        echo "CXX=$CXX" >> $GITHUB_ENV
        
        echo "✅ 环境设置完成"
        echo "CC: $CC"
        echo "CXX: $CXX"
        echo "SYSROOT: $SYSROOT"

    - name: Build QEMU
      run: |
        echo "=== 构建QEMU ==="
        cd third_party/qemu
        
        # 清理并创建构建目录
        rm -rf build
        mkdir -p build
        cd build
        
        # 创建posix_memalign修复头文件
        cat > posix_memalign_fix.h << 'EOF'
        #ifndef POSIX_MEMALIGN_FIX_H
        #define POSIX_MEMALIGN_FIX_H
        #include <stdlib.h>
        #include <errno.h>
        #include <stdint.h>
        
        static inline int posix_memalign_fixed(void **memptr, size_t alignment, size_t size) {
            if (alignment < sizeof(void*) || (alignment & (alignment - 1)) != 0) {
                return EINVAL;
            }
            void *ptr = aligned_alloc(alignment, size);
            if (ptr) {
                *memptr = ptr;
                return 0;
            }
            ptr = malloc(size + alignment - 1);
            if (!ptr) return ENOMEM;
            uintptr_t addr = (uintptr_t)ptr;
            uintptr_t aligned = (addr + alignment - 1) & ~(alignment - 1);
            *memptr = (void*)aligned;
            return 0;
        }
        
        #ifndef posix_memalign
        #define posix_memalign posix_memalign_fixed
        #endif
        #endif
        EOF
        
        # 设置环境变量
        export CFLAGS="-target aarch64-unknown-linux-ohos --sysroot=$SYSROOT -include posix_memalign_fix.h -D__aarch64__"
        export CXXFLAGS="-target aarch64-unknown-linux-ohos --sysroot=$SYSROOT -include posix_memalign_fix.h -D__aarch64__"
        export LDFLAGS="-target aarch64-unknown-linux-ohos --sysroot=$SYSROOT"
        
        # 运行configure
        ../configure \
          --target-list=aarch64-softmmu \
          --cc="$CC" \
          --cxx="$CXX" \
          --host-cc="/usr/bin/gcc" \
          --cross-prefix="" \
          --extra-cflags="$CFLAGS" \
          --extra-cxxflags="$CXXFLAGS" \
          --extra-ldflags="$LDFLAGS" \
          -Db_staticpic=true \
          -Db_pie=false \
          -Ddefault_library=static \
          -Dtools=disabled \
          --enable-tcg \
          --disable-kvm \
          --disable-xen \
          --disable-werror \
          --enable-vnc \
          --enable-slirp \
          --enable-curl \
          --enable-fdt \
          --enable-guest-agent \
          --enable-vhost-user \
          --enable-vhost-net \
          --disable-keyring \
          --enable-tpm \
          --disable-gtk \
          --disable-sdl \
          --disable-vte \
          --disable-curses \
          --disable-brlapi \
          --disable-spice \
          --disable-usb-redir \
          --disable-lzo \
          --disable-snappy \
          --disable-bzip2 \
          --disable-lzfse \
          --disable-zstd \
          --disable-libssh \
          --disable-nettle \
          --disable-gcrypt \
          --disable-gnutls \
          --disable-nss
        
        echo "✅ Configure完成"
        
        # 修复posix_memalign检测
        for config_file in "config.h" "config-host.h" "config-target.h"; do
            if [ -f "$config_file" ]; then
                sed -i '/CONFIG_POSIX_MEMALIGN/d' "$config_file"
                echo "#define CONFIG_POSIX_MEMALIGN 1" >> "$config_file"
            fi
        done
        
        # 编译
        make -j$(nproc)
        
        echo "✅ QEMU编译完成"
        
        # 创建libqemu_full.so
        if [ -f "qemu-system-aarch64" ]; then
            cp qemu-system-aarch64 libqemu_full.so
            echo "✅ libqemu_full.so创建成功"
        else
            echo "❌ qemu-system-aarch64未找到"
            exit 1
        fi

    - name: Build NAPI module
      run: |
        echo "=== 构建NAPI模块 ==="
        cd entry/src/main/cpp
        
        # 清理并创建构建目录
        rm -rf build
        mkdir -p build
        cd build
        
        # 查找CMake
        CMAKE_CANDIDATES=(
          "$OHOS_NDK_HOME/build-tools/cmake/bin/cmake"
          "$OHOS_NDK_HOME/cmake/bin/cmake"
          "$OHOS_NDK_HOME/bin/cmake"
          "/usr/bin/cmake"
        )
        
        CMAKE=""
        for candidate in "${CMAKE_CANDIDATES[@]}"; do
          if [ -f "$candidate" ]; then
            CMAKE="$candidate"
            break
          fi
        done
        
        if [ -z "$CMAKE" ]; then
          echo "❌ 未找到CMake"
          exit 1
        fi
        
        # 配置CMake
        "$CMAKE" .. \
          -DCMAKE_SYSTEM_NAME=Linux \
          -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
          -DCMAKE_C_COMPILER="$CC" \
          -DCMAKE_CXX_COMPILER="$CXX" \
          -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
          -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
          -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
          -DOHOS_NDK_HOME="$OHOS_NDK_HOME" \
          -DSYSROOT="$SYSROOT"
        
        # 编译
        make -j$(nproc)
        
        echo "✅ NAPI模块编译完成"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: qemu-harmonyos-build
        path: |
          third_party/qemu/build/qemu-system-aarch64
          third_party/qemu/build/libqemu_full.so
          entry/src/main/cpp/build/libqemu_hmos.so
        retention-days: 7

    - name: Build HAP package
      run: |
        echo "=== 构建HAP包 ==="
        
        # 复制libqemu_full.so到正确位置
        mkdir -p entry/src/main/cpp/libs/arm64-v8a
        cp third_party/qemu/build/libqemu_full.so entry/src/main/cpp/libs/arm64-v8a/
        
        # 复制NAPI模块
        cp entry/src/main/cpp/build/libqemu_hmos.so entry/src/main/cpp/libs/arm64-v8a/
        
        # 构建HAP包
        ./hvigorw assembleHap
        
        echo "✅ HAP包构建完成"
