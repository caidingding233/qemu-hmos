name: Build QEMU for HarmonyOS (OHOS musl toolchain)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install host build tools
      run: |
        sudo apt-get update
        # Host tools only; target libs are built from source for OHOS (musl)
        sudo apt-get install -y \
          build-essential curl wget unzip python3 file tree pkg-config \
          cmake ninja-build meson

    - name: Download and setup OpenHarmony NDK
      run: |
        echo "=== Downloading SDK ==="
        curl -OL https://repo.huaweicloud.com/openharmony/os/5.1.0-Release/ohos-sdk-windows_linux-public.tar.gz
        
        echo "=== Extracting SDK ==="
        tar -xzf ohos-sdk-windows_linux-public.tar.gz
        rm ohos-sdk-windows_linux-public.tar.gz
        rm -rf ohos-sdk/{ohos,windows}
        
        echo "=== Processing SDK ==="
        cd ohos-sdk/linux
        
        echo "=== Finding native SDK zip ==="
        NATIVE_ZIP=$(find . -name "native-linux-x64-*.zip" | head -1)
        if [ -z "$NATIVE_ZIP" ]; then
          echo "❌ Could not find native-linux-x64-*.zip"
          echo "Available files:"
          ls -la
          exit 1
        fi
        
        echo "✅ Found native SDK: $NATIVE_ZIP"
        
        echo "=== Extracting native SDK ==="
        unzip -q "$NATIVE_ZIP"
        rm "$NATIVE_ZIP"
        
        echo "=== Verifying extraction ==="
        echo "Contents after extraction:"
        ls -la
        
        echo ""
        echo "=== Debugging directory structure ==="
        echo "All directories:"
        find . -type d | head -20
        
        echo ""
        echo "All files:"
        find . -type f | head -20
        
        # Look for the extracted directory with multiple patterns
        echo ""
        echo "=== Looking for native directory ==="
        NATIVE_DIR=""
        
        # Try different patterns
        for pattern in "native-linux-x64-*" "native-*" "*native*"; do
          echo "Searching for pattern: $pattern"
          found=$(find . -name "$pattern" -type d | head -1)
          if [ -n "$found" ]; then
            NATIVE_DIR="$found"
            echo "✅ Found with pattern '$pattern': $NATIVE_DIR"
            break
          fi
        done
        
        # If still not found, try generic 'native' directory
        if [ -z "$NATIVE_DIR" ]; then
          echo "Trying generic 'native' directory search..."
          NATIVE_DIR=$(find . -type d -name 'native' | head -1)
          if [ -n "$NATIVE_DIR" ]; then
            echo "✅ Found generic native directory: $NATIVE_DIR"
          fi
        fi
        
        if [ -z "$NATIVE_DIR" ]; then
          echo "❌ Could not find any native directory"
          echo "Available directories:"
          find . -type d
          echo ""
          echo "Available files:"
          find . -type f | head -20
          exit 1
        fi
        
        echo "✅ Final native directory: $NATIVE_DIR"
        
        echo "=== Setting up environment ==="
        # Set up base paths (OHOS NDK is musl-based)
        export OHOS_NDK_HOME="$(pwd)/$NATIVE_DIR"
        export SYSROOT="$(pwd)/$NATIVE_DIR/sysroot"
        
        echo "=== Analyzing native directory structure ==="
        echo "Contents of $NATIVE_DIR:"
        ls -la "$NATIVE_DIR"
        
        echo ""
        echo "Looking for llvm directory:"
        find "$NATIVE_DIR" -name "llvm" -type d
        
        echo ""
        echo "Looking for build-tools directory:"
        find "$NATIVE_DIR" -name "build-tools" -type d
        
        echo ""
        echo "Looking for any clang compiler:"
        find "$NATIVE_DIR" -name "*clang*" -type f
        
        # Record toolchain locations (we will use NDK-provided clang directly)
        export CC="$OHOS_NDK_HOME/llvm/bin/aarch64-unknown-linux-ohos-clang"
        export CXX="$OHOS_NDK_HOME/llvm/bin/aarch64-unknown-linux-ohos-clang++"
        export LD="$OHOS_NDK_HOME/llvm/bin/ld.lld"
        export AR="$OHOS_NDK_HOME/llvm/bin/llvm-ar"
        export RANLIB="$OHOS_NDK_HOME/llvm/bin/llvm-ranlib"
        export STRIP="$OHOS_NDK_HOME/llvm/bin/llvm-strip"
        command -v cmake >/dev/null || sudo apt-get install -y cmake
        
        echo "=== Final environment ==="
        echo "OHOS_NDK_HOME: $OHOS_NDK_HOME"
        echo "SYSROOT: $SYSROOT"
        echo "CC: $CC"
        echo "CXX: $CXX"
        echo "CMAKE: $CMAKE"
        
        echo ""
        echo "=== Testing compiler ==="
        if [ -f "$CC" ]; then
          echo "✅ CC exists: $CC"
          file "$CC"
          "$CC" --version 2>&1 | head -3 || echo "Version check failed"
        else
          echo "❌ CC not found: $CC"
          exit 1
        fi
        
        echo ""
        echo "=== Testing CMake ==="
        if [ -f "$CMAKE" ]; then
          echo "✅ CMake exists: $CMAKE"
          "$CMAKE" --version | head -3 || echo "CMake version check failed"
        else
          echo "❌ CMake not found: $CMAKE"
          echo "Available files in build-tools/cmake/bin:"
          ls -la "$(dirname "$CMAKE")" || echo "Cannot list cmake/bin"
          exit 1
        fi
        
        # Save environment for next steps
        echo "OHOS_NDK_HOME=$OHOS_NDK_HOME" >> $GITHUB_ENV
        echo "SYSROOT=$SYSROOT" >> $GITHUB_ENV
        echo "CC=$CC" >> $GITHUB_ENV
        echo "CXX=$CXX" >> $GITHUB_ENV
        echo "AR=$AR" >> $GITHUB_ENV
        echo "RANLIB=$RANLIB" >> $GITHUB_ENV
        echo "STRIP=$STRIP" >> $GITHUB_ENV

    - name: Build OHOS deps (GLib, Pixman, PCRE2)
      run: |
        echo "=== Building OHOS-friendly deps (musl, static) ==="
        export OHOS_NDK_HOME="$OHOS_NDK_HOME"
        bash tools/build_ohos_deps.sh

    - name: Build QEMU (aarch64-unknown-linux-ohos)
      run: |
        echo "=== Building QEMU with OHOS toolchain ==="
        export OHOS_NDK_HOME="$OHOS_NDK_HOME"
        export SYSROOT="$SYSROOT"
        bash third_party/qemu/build_harmonyos_full.sh
        echo "=== Checking build results ==="
        ls -la third_party/qemu/build_harmonyos_full/qemu-system-aarch64 || true
        find third_party/qemu/build_harmonyos_full -maxdepth 1 -type f -name "qemu-system-*" -ls || true

    - name: Build NAPI module
      run: |
        echo "=== Building NAPI module (OHOS) ==="
        cd entry/src/main/cpp
        rm -rf build && mkdir -p build && cd build
        cmake .. \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_SYSTEM_NAME=Linux \
          -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
          -DCMAKE_C_COMPILER="$OHOS_NDK_HOME/llvm/bin/aarch64-unknown-linux-ohos-clang" \
          -DCMAKE_CXX_COMPILER="$OHOS_NDK_HOME/llvm/bin/aarch64-unknown-linux-ohos-clang++" \
          -DOHOS_NDK_HOME="$OHOS_NDK_HOME"
        ninja -v
        echo "✅ NAPI module build completed!"
        echo "=== Build artifacts ==="
        ls -la ../libs/arm64-v8a || true
        find . -name "*.so" -o -name "*.a" || true

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: qemu-harmonyos-build
        path: |
          third_party/qemu/build_harmonyos_full/qemu-system-aarch64
          third_party/qemu/build_harmonyos_full/*.so
          third_party/qemu/build_harmonyos_full/*.a
          entry/src/main/libs/arm64-v8a/*.so
        retention-days: 7
