name: Build QEMU for HarmonyOS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: false  # 不需要子模块，简化构建

    - name: Install basic dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential curl wget python3 python3-pip git

    - name: Set up Python for Meson
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Meson and Ninja
      run: |
        python -m pip install --upgrade meson ninja
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Download and setup HarmonyOS SDK
      run: |
        echo "=== Downloading HarmonyOS SDK ==="
        # 使用固定的SDK版本，避免兼容性问题
        SDK_URL="https://repo.huaweicloud.com/openharmony/os/5.1.0-Release/ohos-sdk-windows_linux-public.tar.gz"
        curl -L -o sdk.tar.gz "$SDK_URL"
        tar -xzf sdk.tar.gz
        rm sdk.tar.gz

        # 简化SDK结构处理
        if [ -d "ohos-sdk/linux" ]; then
          cd ohos-sdk/linux
        else
          echo "❌ SDK structure not as expected"
          ls -la ohos-sdk/
          exit 1
        fi

        # 查找native工具链
        NATIVE_ZIP=$(find . -name "*native*linux*x64*.zip" | head -1)
        if [ -z "$NATIVE_ZIP" ]; then
          echo "❌ No native SDK zip found"
          find . -name "*.zip" | head -5
          exit 1
        fi

        echo "Found native SDK: $NATIVE_ZIP"
        unzip -q "$NATIVE_ZIP"
        rm "$NATIVE_ZIP"

        # 设置工具链路径
        NATIVE_DIR=$(find . -maxdepth 1 -type d -name "native-*" | head -1)
        if [ -z "$NATIVE_DIR" ]; then
          echo "❌ No native directory found"
          ls -la
          exit 1
        fi

        export OHOS_NDK_HOME="$PWD/$NATIVE_DIR"
        export SYSROOT="$OHOS_NDK_HOME/sysroot"
        export CC="$OHOS_NDK_HOME/llvm/bin/aarch64-unknown-linux-ohos-clang"
        export CXX="$OHOS_NDK_HOME/llvm/bin/aarch64-unknown-linux-ohos-clang++"
        export AR="$OHOS_NDK_HOME/llvm/bin/llvm-ar"
        export STRIP="$OHOS_NDK_HOME/llvm/bin/llvm-strip"

        echo "OHOS_NDK_HOME=$OHOS_NDK_HOME" >> $GITHUB_ENV
        echo "SYSROOT=$SYSROOT" >> $GITHUB_ENV
        echo "CC=$CC" >> $GITHUB_ENV
        echo "CXX=$CXX" >> $GITHUB_ENV
        echo "AR=$AR" >> $GITHUB_ENV
        echo "STRIP=$STRIP" >> $GITHUB_ENV

        # 验证工具链
        if [ ! -f "$CC" ]; then
          echo "❌ Clang not found at $CC"
          exit 1
        fi
        echo "✅ HarmonyOS SDK ready"

    - name: Build QEMU static library
      run: |
        echo "=== Building QEMU ==="
        cd third_party/qemu

        # 清理之前的构建
        rm -rf build
        mkdir build
        cd build

        # 简化的QEMU配置 - 静态构建，禁用复杂功能
        ../configure \
          --target-list=aarch64-softmmu \
          --cross-prefix=aarch64-unknown-linux-ohos- \
          --cc="$CC" \
          --host-cc="/usr/bin/cc" \
          --extra-cflags="-target aarch64-unknown-linux-ohos --sysroot=$SYSROOT" \
          --extra-ldflags="-target aarch64-unknown-linux-ohos --sysroot=$SYSROOT" \
          --enable-tcg \
          --disable-kvm \
          --disable-xen \
          --disable-werror \
          --disable-vnc \
          --disable-slirp \
          --disable-curl \
          --disable-ssh \
          --disable-gnutls \
          --disable-nettle \
          --disable-gcrypt \
          -Dwrap_mode=forcefallback \
          -Ddefault_library=static \
          -Db_staticpic=true \
          -Dtools=disabled \
          -Dvhost_user=disabled \
          -Dguest_agent=disabled

        # 构建
        ninja -j$(nproc)

        # 验证构建结果
        if [ ! -f "libqemu-aarch64-softmmu.a" ]; then
          echo "❌ QEMU static library not found"
          exit 1
        fi
        echo "✅ QEMU built successfully"

    - name: Create QEMU shared library
      run: |
        echo "=== Creating libqemu_full.so ==="
        cd third_party/qemu/build

        # 创建共享库 - 简化的链接
        $CXX -shared -fPIC -Wl,--no-undefined \
          -target aarch64-unknown-linux-ohos --sysroot=$SYSROOT \
          -Wl,--whole-archive \
          libqemu-aarch64-softmmu.a \
          libqemuutil.a \
          -Wl,--no-whole-archive \
          -lpthread -ldl -lm \
          -o libqemu_full.so

        # 验证共享库
        if [ ! -f "libqemu_full.so" ]; then
          echo "❌ Shared library creation failed"
          exit 1
        fi

        # 去除调试符号减小体积
        $STRIP -S libqemu_full.so
        echo "✅ libqemu_full.so created (size: $(du -h libqemu_full.so | cut -f1))"

    - name: Build NAPI module
      run: |
        echo "=== Building NAPI Module ==="
        cd entry/src/main/cpp

        # 创建构建目录
        rm -rf build
        mkdir build
        cd build

        # 简化的CMake配置
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_COMPILER="$CC" \
          -DCMAKE_CXX_COMPILER="$CXX" \
          -DCMAKE_AR="$AR" \
          -DCMAKE_STRIP="$STRIP" \
          -DCMAKE_SYSROOT="$SYSROOT" \
          -DCMAKE_FIND_ROOT_PATH="$SYSROOT" \
          -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
          -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
          -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY

        # 构建
        make -j$(nproc)

        # 验证NAPI模块
        if [ ! -f "libqemu_hmos.so" ]; then
          echo "❌ NAPI module not built"
          exit 1
        fi
        echo "✅ NAPI module built successfully"

    - name: Copy libraries to target locations
      run: |
        echo "=== Copying Libraries ==="
        # 创建目标目录
        mkdir -p entry/src/main/libs/arm64-v8a
        mkdir -p entry/src/main/oh_modules

        # 复制库文件
        cp third_party/qemu/build/libqemu_full.so entry/src/main/libs/arm64-v8a/
        cp third_party/qemu/build/libqemu_full.so entry/src/main/oh_modules/
        cp entry/src/main/cpp/build/libqemu_hmos.so entry/src/main/libs/arm64-v8a/

        echo "✅ Libraries copied successfully"
        echo "Generated files:"
        ls -la entry/src/main/libs/arm64-v8a/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: qemu-harmonyos-libs-${{ github.run_number }}
        path: |
          entry/src/main/libs/arm64-v8a/libqemu_full.so
          entry/src/main/libs/arm64-v8a/libqemu_hmos.so
        retention-days: 30
