name: Build QEMU for HarmonyOS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: false

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake curl wget unzip python3 \
                              libglib2.0-dev libpixman-1-dev libssl-dev \
                              libcurl4-openssl-dev libssh-dev libgnutls28-dev \
                              libsasl2-dev libpam0g-dev libbz2-dev libzstd-dev \
                              libpcre2-dev pkg-config meson tree

    - name: Download and setup SDK
      run: |
        echo "=== Downloading SDK ==="
        curl -OL https://repo.huaweicloud.com/openharmony/os/5.1.0-Release/ohos-sdk-windows_linux-public.tar.gz
        
        echo "=== Extracting SDK ==="
        tar -xzf ohos-sdk-windows_linux-public.tar.gz
        rm ohos-sdk-windows_linux-public.tar.gz
        rm -rf ohos-sdk/{ohos,windows}
        
        echo "=== Processing SDK ==="
        cd ohos-sdk/linux
        
        # Extract files one by one to avoid pipe issues
        echo "Extracting SDK files..."
        find . -type f -name "*.zip" | while read -r file; do
          echo "Extracting: $file"
          if unzip -q "$file"; then
            rm "$file"
            echo "✅ Extracted: $file"
          else
            echo "❌ Failed to extract: $file"
          fi
        done
        
        cd ../..
        
        echo "=== Finding NDK ==="
        # Look for the compiler using find command
        CLANG_PATH=$(find ohos-sdk/linux -name "aarch64-unknown-linux-ohos-clang" -type f 2>/dev/null | head -1)
        
        if [ -z "$CLANG_PATH" ]; then
          echo "❌ Could not find clang compiler"
          echo "SDK structure:"
          find ohos-sdk/linux -name "*clang*" -type f 2>/dev/null | head -10 || echo "No clang files found"
          echo ""
          echo "Available directories:"
          ls -la ohos-sdk/linux/ 2>/dev/null || echo "Cannot list SDK directory"
          echo ""
          echo "Directory tree (first 3 levels):"
          tree ohos-sdk/linux -L 3 2>/dev/null || echo "Tree command not available"
          exit 1
        fi
        
        echo "✅ Found clang at: $CLANG_PATH"
        
        # Set environment variables
        NDK_PATH=$(dirname "$CLANG_PATH")
        NDK_PATH=$(dirname "$NDK_PATH")
        NDK_PATH=$(dirname "$NDK_PATH")
        
        echo "✅ NDK Path: $NDK_PATH"
        echo "✅ Clang Path: $CLANG_PATH"
        
        # Verify paths exist
        if [ ! -f "$CLANG_PATH" ]; then
          echo "❌ Clang compiler not found at: $CLANG_PATH"
          exit 1
        fi
        
        if [ ! -d "$NDK_PATH/sysroot" ]; then
          echo "❌ Sysroot not found at: $NDK_PATH/sysroot"
          exit 1
        fi
        
        echo "OHOS_NDK_HOME=$NDK_PATH" >> $GITHUB_ENV
        echo "SYSROOT=$NDK_PATH/sysroot" >> $GITHUB_ENV
        echo "CC=$CLANG_PATH" >> $GITHUB_ENV
        echo "CXX=$NDK_PATH/llvm/bin/aarch64-unknown-linux-ohos-clang++" >> $GITHUB_ENV
        echo "AR=$NDK_PATH/llvm/bin/llvm-ar" >> $GITHUB_ENV
        echo "STRIP=$NDK_PATH/llvm/bin/llvm-strip" >> $GITHUB_ENV
        echo "RANLIB=$NDK_PATH/llvm/bin/llvm-ranlib" >> $GITHUB_ENV
        echo "LD=$NDK_PATH/llvm/bin/ld.lld" >> $GITHUB_ENV
        
        echo "✅ Environment set up successfully"

    - name: Build QEMU
      run: |
        echo "=== Building QEMU ==="
        
        cd third_party/qemu
        
        # Clean and create build directory
        rm -rf build_simple
        mkdir -p build_simple
        cd build_simple
        
        # Configure QEMU
        echo "Configuring QEMU..."
        echo "Current directory: $(pwd)"
        echo "Looking for configure script..."
        ls -la ../
        ../configure \
          --target-list=aarch64-softmmu \
          --cross-prefix=aarch64-unknown-linux-ohos- \
          --cc="$CC" \
          --host-cc="/usr/bin/cc" \
          --extra-cflags="-target aarch64-unknown-linux-ohos --sysroot=${SYSROOT}" \
          --extra-ldflags="-target aarch64-unknown-linux-ohos --sysroot=${SYSROOT}" \
          -Db_staticpic=true \
          -Db_pie=false \
          -Ddefault_library=static \
          -Dtools=disabled \
          --enable-tcg \
          --enable-vnc \
          --enable-slirp \
          --enable-curl \
          --enable-fdt \
          --enable-guest-agent \
          --disable-kvm \
          --disable-xen \
          --disable-werror
        
        # Build QEMU
        echo "Building QEMU..."
        make -j$(nproc)
        
        # Verify build
        if [ ! -f "libqemu-aarch64-softmmu.a" ] || [ ! -f "libqemuutil.a" ]; then
          echo "❌ QEMU build failed"
          exit 1
        fi
        
        echo "✅ QEMU build successful"

    - name: Create shared library
      run: |
        echo "=== Creating Shared Library ==="
        
        cd third_party/qemu/build_simple
        
        # Create shared library with all dependencies
        $CXX -shared -fPIC -Wl,--no-undefined \
          -target aarch64-unknown-linux-ohos --sysroot=${SYSROOT} \
          -Wl,--whole-archive \
          libqemu-aarch64-softmmu.a \
          libqemuutil.a \
          -Wl,--no-whole-archive \
          # Include dependency libraries
          ../../deps/glib/build/glib/libglib-2.0.a \
          ../../deps/glib/build/gobject/libgobject-2.0.a \
          ../../deps/glib/build/gthread/libgthread-2.0.a \
          ../../deps/glib/build/glib/libcharset/libcharset.a \
          ../../deps/glib/build/glib/gnulib/libgnulib.a \
          ../../deps/pixman/build/pixman/libpixman-1.a \
          ../../deps/pixman/build/pixman/libpixman-arm-neon.a \
          ../../deps/openssl/build/libssl.a \
          ../../deps/openssl/build/libcrypto.a \
          ../../deps/pcre2/build/libpcre2-8.a \
          ../../deps/pcre2/build/libpcre2-posix.a \
          -lpthread -ldl -lm -lz \
          -o libqemu_full.so
        
        # Strip debug symbols
        $STRIP -S libqemu_full.so
        
        if [ ! -f "libqemu_full.so" ]; then
          echo "❌ Shared library creation failed"
          exit 1
        fi
        
        echo "✅ Shared library created successfully"
        file libqemu_full.so
        du -h libqemu_full.so

    - name: Build NAPI module
      run: |
        echo "=== Building NAPI Module ==="
        
        cd entry/src/main/cpp
        
        # Create build directory
        rm -rf build
        mkdir -p build
        cd build
        
        # Configure with CMake
        echo "Configuring NAPI module..."
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_SYSTEM_NAME=Linux \
          -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
          -DCMAKE_C_COMPILER="$CC" \
          -DCMAKE_CXX_COMPILER="$CXX" \
          -DCMAKE_AR="$AR" \
          -DCMAKE_STRIP="$STRIP" \
          -DCMAKE_RANLIB="$RANLIB" \
          -DCMAKE_SYSROOT="$SYSROOT" \
          -DCMAKE_FIND_ROOT_PATH="$SYSROOT" \
          -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
          -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
          -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY
        
        # Build NAPI module
        echo "Building NAPI module..."
        make -j$(nproc)
        
        if [ ! -f "libqemu_hmos.so" ]; then
          echo "❌ NAPI module build failed"
          exit 1
        fi
        
        echo "✅ NAPI module built successfully"
        file libqemu_hmos.so
        du -h libqemu_hmos.so

    - name: Copy libraries
      run: |
        echo "=== Copying Libraries ==="
        
        # Create target directories
        mkdir -p entry/src/main/libs/arm64-v8a
        mkdir -p entry/src/main/oh_modules
        
        # Copy libraries
        cp third_party/qemu/build_simple/libqemu_full.so entry/src/main/libs/arm64-v8a/
        cp third_party/qemu/build_simple/libqemu_full.so entry/src/main/oh_modules/
        cp entry/src/main/cpp/build/libqemu_hmos.so entry/src/main/libs/arm64-v8a/
        
        echo "✅ Libraries copied successfully"
        
        # Show results
        echo "=== Final Results ==="
        ls -la entry/src/main/libs/arm64-v8a/
        du -h entry/src/main/libs/arm64-v8a/*
        file entry/src/main/libs/arm64-v8a/*

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: qemu-simple-build
        path: |
          entry/src/main/libs/arm64-v8a/
          entry/src/main/oh_modules/
        retention-days: 7
