name: Build QEMU for HarmonyOS, using Huawei's toolchain

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake curl wget unzip python3 \
                              libglib2.0-dev libpixman-1-dev libssl-dev \
                              libcurl4-openssl-dev libssh-dev libgnutls28-dev \
                              libsasl2-dev libpam0g-dev libbz2-dev libzstd-dev \
                              libpcre2-dev pkg-config meson tree \
                              binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu \
                              libc6-dev

    - name: Download and setup SDK
      run: |
        echo "=== Downloading SDK ==="
        curl -OL https://repo.huaweicloud.com/openharmony/os/5.1.0-Release/ohos-sdk-windows_linux-public.tar.gz
        
        echo "=== Extracting SDK ==="
        tar -xzf ohos-sdk-windows_linux-public.tar.gz
        rm ohos-sdk-windows_linux-public.tar.gz
        rm -rf ohos-sdk/{ohos,windows}
        
        echo "=== Processing SDK ==="
        cd ohos-sdk/linux
        
        echo "=== Finding native SDK zip ==="
        NATIVE_ZIP=$(find . -name "native-linux-x64-*.zip" | head -1)
        if [ -z "$NATIVE_ZIP" ]; then
          echo "❌ Could not find native-linux-x64-*.zip"
          echo "Available files:"
          ls -la
          exit 1
        fi
        
        echo "✅ Found native SDK: $NATIVE_ZIP"
        
        echo "=== Extracting native SDK ==="
        unzip -q "$NATIVE_ZIP"
        rm "$NATIVE_ZIP"
        
        echo "=== Verifying extraction ==="
        echo "Contents after extraction:"
        ls -la
        
        echo ""
        echo "=== Debugging directory structure ==="
        echo "All directories:"
        find . -type d | head -20
        
        echo ""
        echo "All files:"
        find . -type f | head -20
        
        # Look for the extracted directory with multiple patterns
        echo ""
        echo "=== Looking for native directory ==="
        NATIVE_DIR=""
        
        # Try different patterns
        for pattern in "native-linux-x64-*" "native-*" "*native*"; do
          echo "Searching for pattern: $pattern"
          found=$(find . -name "$pattern" -type d | head -1)
          if [ -n "$found" ]; then
            NATIVE_DIR="$found"
            echo "✅ Found with pattern '$pattern': $NATIVE_DIR"
            break
          fi
        done
        
        # If still not found, try generic 'native' directory
        if [ -z "$NATIVE_DIR" ]; then
          echo "Trying generic 'native' directory search..."
          NATIVE_DIR=$(find . -type d -name 'native' | head -1)
          if [ -n "$NATIVE_DIR" ]; then
            echo "✅ Found generic native directory: $NATIVE_DIR"
          fi
        fi
        
        if [ -z "$NATIVE_DIR" ]; then
          echo "❌ Could not find any native directory"
          echo "Available directories:"
          find . -type d
          echo ""
          echo "Available files:"
          find . -type f | head -20
          exit 1
        fi
        
        echo "✅ Final native directory: $NATIVE_DIR"
        
        echo "=== Setting up environment ==="
        # Set up base paths
        export OHOS_NDK_HOME="$(pwd)/$NATIVE_DIR"
        export SYSROOT="$(pwd)/$NATIVE_DIR/sysroot"
        
        echo "=== Analyzing native directory structure ==="
        echo "Contents of $NATIVE_DIR:"
        ls -la "$NATIVE_DIR"
        
        echo ""
        echo "Looking for llvm directory:"
        find "$NATIVE_DIR" -name "llvm" -type d
        
        echo ""
        echo "Looking for build-tools directory:"
        find "$NATIVE_DIR" -name "build-tools" -type d
        
        echo ""
        echo "Looking for any clang compiler:"
        find "$NATIVE_DIR" -name "*clang*" -type f
        
        # Find clang compiler dynamically
        echo ""
        echo "=== Finding clang compiler ==="
        CLANG_CANDIDATES=(
          "$NATIVE_DIR/llvm/bin/aarch64-unknown-linux-ohos-clang"
          "$NATIVE_DIR/llvm/bin/clang"
          "$NATIVE_DIR/bin/aarch64-unknown-linux-ohos-clang"
          "$NATIVE_DIR/bin/clang"
        )
        
        CC=""
        for candidate in "${CLANG_CANDIDATES[@]}"; do
          if [ -f "$candidate" ]; then
            CC="$candidate"
            echo "✅ Found CC: $CC"
            break
          fi
        done
        
        if [ -z "$CC" ]; then
          echo "❌ No clang compiler found in expected locations"
          echo "Searching for any clang file:"
          CLANG_PATH=$(find "$NATIVE_DIR" -type f -name '*clang*' | head -1)
          if [ -n "$CLANG_PATH" ]; then
            CC="$CLANG_PATH"
            echo "✅ Found alternative CC: $CC"
          else
            echo "❌ No clang compiler found at all"
            exit 1
          fi
        fi
        
        # Find C++ compiler
        CXX_CANDIDATES=(
          "$NATIVE_DIR/llvm/bin/aarch64-unknown-linux-ohos-clang++"
          "$NATIVE_DIR/llvm/bin/clang++"
          "$NATIVE_DIR/bin/aarch64-unknown-linux-ohos-clang++"
          "$NATIVE_DIR/bin/clang++"
        )
        
        CXX=""
        for candidate in "${CXX_CANDIDATES[@]}"; do
          if [ -f "$candidate" ]; then
            CXX="$candidate"
            echo "✅ Found CXX: $CXX"
            break
          fi
        done
        
        if [ -z "$CXX" ]; then
          echo "⚠️ No C++ compiler found, using CC for CXX"
          CXX="$CC"
        fi
        
        # Find CMake
        CMAKE_CANDIDATES=(
          "$NATIVE_DIR/build-tools/cmake/bin/cmake"
          "$NATIVE_DIR/cmake/bin/cmake"
          "$NATIVE_DIR/bin/cmake"
          "/usr/bin/cmake"
        )
        
        CMAKE=""
        for candidate in "${CMAKE_CANDIDATES[@]}"; do
          if [ -f "$candidate" ]; then
            CMAKE="$candidate"
            echo "✅ Found CMake: $CMAKE"
            break
          fi
        done
        
        if [ -z "$CMAKE" ]; then
          echo "❌ No CMake found"
          exit 1
        fi
        
        echo "=== Final environment ==="
        echo "OHOS_NDK_HOME: $OHOS_NDK_HOME"
        echo "SYSROOT: $SYSROOT"
        echo "CC: $CC"
        echo "CXX: $CXX"
        echo "CMAKE: $CMAKE"
        
        echo ""
        echo "=== Testing compiler ==="
        if [ -f "$CC" ]; then
          echo "✅ CC exists: $CC"
          file "$CC"
          "$CC" --version 2>&1 | head -3 || echo "Version check failed"
        else
          echo "❌ CC not found: $CC"
          exit 1
        fi
        
        echo ""
        echo "=== Testing CMake ==="
        if [ -f "$CMAKE" ]; then
          echo "✅ CMake exists: $CMAKE"
          "$CMAKE" --version | head -3 || echo "CMake version check failed"
        else
          echo "❌ CMake not found: $CMAKE"
          echo "Available files in build-tools/cmake/bin:"
          ls -la "$(dirname "$CMAKE")" || echo "Cannot list cmake/bin"
          exit 1
        fi
        
        # Save environment for next steps
        echo "OHOS_NDK_HOME=$OHOS_NDK_HOME" >> $GITHUB_ENV
        echo "SYSROOT=$SYSROOT" >> $GITHUB_ENV
        echo "CC=$CC" >> $GITHUB_ENV
        echo "CXX=$CXX" >> $GITHUB_ENV
        echo "CMAKE=$CMAKE" >> $GITHUB_ENV

    - name: Build QEMU
      run: |
        echo "=== Restoring environment variables ==="
        # Restore environment variables from previous step
        export OHOS_NDK_HOME="$OHOS_NDK_HOME"
        export SYSROOT="$SYSROOT"
        export CC="$CC"
        export CXX="$CXX"
        export CMAKE="$CMAKE"

        echo "=== Building QEMU ==="
        cd third_party/qemu

        mkdir -p build
        cd build

        echo "Environment check:"
        echo "CC: $CC"
        echo "CXX: $CXX"
        echo "SYSROOT: $SYSROOT"
        
        echo ""
        echo "=== Running Configure ==="
        # 使用系统glibc头文件，避免HarmonyOS sysroot头文件冲突
        export CFLAGS="$CFLAGS --target=aarch64-linux-gnu --sysroot=${SYSROOT} -isystem /usr/include -idirafter ${SYSROOT}/usr/include"
        export CXXFLAGS="$CXXFLAGS --target=aarch64-linux-gnu --sysroot=${SYSROOT} -isystem /usr/include -idirafter ${SYSROOT}/usr/include"
        ../configure \
          --target-list=aarch64-softmmu \
          --cc="$CC" \
          --cxx="$CXX" \
          --host-cc="/usr/bin/cc" \
          --cross-prefix="" \
          --extra-cflags="--target=aarch64-linux-gnu --sysroot=${SYSROOT} -I/usr/include -I${SYSROOT}/usr/include" \
          --extra-cxxflags="--target=aarch64-linux-gnu --sysroot=${SYSROOT} -I/usr/include -I${SYSROOT}/usr/include" \
          --extra-ldflags="--target=aarch64-linux-gnu --sysroot=${SYSROOT} -L${SYSROOT}/usr/lib -lm" \
          -Db_staticpic=true \
          -Ddefault_library=static \
          -Dtools=disabled \
          --enable-tcg \
          --disable-kvm \
          --disable-xen \
          --disable-werror \
          --enable-vnc \
          --enable-slirp \
          --enable-curl \
          --enable-fdt \
          --enable-guest-agent \
          --enable-vhost-user \
          --enable-vhost-net \
          --disable-keyring \
          --disable-gtk \
          --disable-sdl \
          --disable-vte \
          --disable-curses \
          --disable-brlapi \
          --disable-spice \
          --disable-usb-redir \
          --disable-lzo \
          --disable-snappy \
          --disable-bzip2 \
          --disable-lzfse \
          --disable-zstd \
          --disable-libssh \
          --disable-nettle \
          --disable-gcrypt \
          --enable-gnutls
        
        echo "✅ Configure completed!"
        
        echo "=== Building QEMU ==="
        # 设置正确的链接器环境变量
        export LD=aarch64-linux-gnu-ld
        export AR=aarch64-linux-gnu-ar
        export RANLIB=aarch64-linux-gnu-ranlib
        export STRIP=aarch64-linux-gnu-strip
        make -j$(nproc)
        
        echo "✅ QEMU build completed!"
        
        echo "=== Checking build results ==="
        ls -la qemu-system-aarch64 || echo "Main binary not found"
        find . -name "*.so" -o -name "*.a" | head -10

    - name: Build NAPI module
      run: |
        echo "=== Restoring environment variables ==="
        # Restore environment variables from previous step
        export OHOS_NDK_HOME="$OHOS_NDK_HOME"
        export SYSROOT="$SYSROOT"
        export CC="$CC"
        export CXX="$CXX"
        export CMAKE="$CMAKE"

        echo "Debug: OHOS_NDK_HOME=$OHOS_NDK_HOME"
        echo "Debug: SYSROOT=$SYSROOT"
        echo "Debug: CC=$CC"
        echo "Debug: CXX=$CXX"

        echo "=== Building NAPI module ==="
        cd entry/src/main/cpp

        mkdir -p build
        cd build

        echo "Using CMake: $CMAKE"
        echo "Using CC: $CC"
        echo "Using CXX: $CXX"
        
        "$CMAKE" .. \
          -DCMAKE_SYSTEM_NAME=Linux \
          -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
          -DCMAKE_C_COMPILER="$CC" \
          -DCMAKE_CXX_COMPILER="$CXX" \
          -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
          -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
          -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
          -DOHOS_NDK_HOME="$OHOS_NDK_HOME" \
          -DSYSROOT="$SYSROOT"
        
        make -j$(nproc)
        
        echo "✅ NAPI module build completed!"
        
        echo "=== Build artifacts ==="
        ls -la *.so || echo "No .so files found"
        find . -name "*.so" -o -name "*.a"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: qemu-harmonyos-build
        path: |
          third_party/qemu/build/qemu-system-aarch64
          third_party/qemu/build/*.so
          third_party/qemu/build/*.a
          entry/src/main/libs/arm64-v8a/*.so
        retention-days: 7
