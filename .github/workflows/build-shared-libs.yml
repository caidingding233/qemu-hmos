name: Build QEMU Shared Libraries

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  OHOS_SDK_RELEASE_VERSION: "5.1.0"
  OHOS_SDK_VERSION: "5.1.0.107"

jobs:
  build-shared-libs:
    runs-on: ubuntu-24.04
    
    steps:
    - name: Update Apt Cache
      run: sudo apt update

    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: false

    - name: Install Dependencies
      run: |
        sudo apt install -y build-essential cmake curl wget unzip python3 libncurses-dev \
                            git flex bison bash make autoconf libcurl4-openssl-dev tcl \
                            gettext zip pigz meson liblzma-dev pkg-config \
                            libglib2.0-dev libpixman-1-dev libssl-dev \
                            libcurl4-openssl-dev libssh-dev libgnutls28-dev \
                            libsasl2-dev libpam0g-dev libbz2-dev libzstd-dev \
                            libpcre2-dev

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        max-size: 2G

    - name: Download OHOS SDK
      shell: bash
      run: |
        echo "=== Downloading OHOS SDK ==="
        curl -OL https://repo.huaweicloud.com/openharmony/os/${OHOS_SDK_RELEASE_VERSION}-Release/ohos-sdk-windows_linux-public.tar.gz
        
        echo "=== Extracting SDK ==="
        tar -xzf ohos-sdk-windows_linux-public.tar.gz
        rm ohos-sdk-windows_linux-public.tar.gz
        rm -rf ohos-sdk/{ohos,windows}
        
        echo "=== Processing SDK files ==="
        pushd ohos-sdk/linux
          for file in $(find . -type f); do
            echo "Extracting: $file"
            unzip $file && rm $file
          done
        popd
        
        echo "=== SDK Structure ==="
        find ohos-sdk/linux -type d | head -20
        find ohos-sdk/linux -name "*clang*" | head -10

    - name: Setup Environment
      shell: bash
      run: |
        echo "=== Setting up Environment ==="
        
        # Find the NDK path
        NDK_PATH=$(find ohos-sdk/linux -name "aarch64-unknown-linux-ohos-clang" -type f | head -1 | xargs dirname | xargs dirname | xargs dirname)
        if [ -z "$NDK_PATH" ]; then
          echo "❌ Could not find NDK path"
          echo "Available files:"
          find ohos-sdk/linux -name "*clang*" -type f
          exit 1
        fi
        
        echo "Found NDK at: $NDK_PATH"
        
        # Set environment variables
        echo "OHOS_NDK_HOME=$NDK_PATH" >> $GITHUB_ENV
        echo "SYSROOT=$NDK_PATH/sysroot" >> $GITHUB_ENV
        echo "CC=$NDK_PATH/llvm/bin/aarch64-unknown-linux-ohos-clang" >> $GITHUB_ENV
        echo "CXX=$NDK_PATH/llvm/bin/aarch64-unknown-linux-ohos-clang++" >> $GITHUB_ENV
        echo "AR=$NDK_PATH/llvm/bin/llvm-ar" >> $GITHUB_ENV
        echo "STRIP=$NDK_PATH/llvm/bin/llvm-strip" >> $GITHUB_ENV
        echo "RANLIB=$NDK_PATH/llvm/bin/llvm-ranlib" >> $GITHUB_ENV
        echo "LD=$NDK_PATH/llvm/bin/ld.lld" >> $GITHUB_ENV
        
        # Verify environment
        echo "=== Environment Verification ==="
        echo "OHOS_NDK_HOME: $NDK_PATH"
        echo "CC: $NDK_PATH/llvm/bin/aarch64-unknown-linux-ohos-clang"
        echo "SYSROOT: $NDK_PATH/sysroot"
        
        if [ -f "$NDK_PATH/llvm/bin/aarch64-unknown-linux-ohos-clang" ]; then
          echo "✅ Compiler found"
          $NDK_PATH/llvm/bin/aarch64-unknown-linux-ohos-clang --version
        else
          echo "❌ Compiler not found"
          exit 1
        fi

    - name: Build QEMU Static Libraries
      shell: bash
      run: |
        echo "=== Building QEMU Static Libraries ==="
        
        cd third_party/qemu
        
        # Clean previous builds
        rm -rf build_shared_libs
        mkdir -p build_shared_libs
        cd build_shared_libs
        
        # Configure QEMU with full functionality
        echo "Configuring QEMU..."
        ../configure \
          --target-list=aarch64-softmmu \
          --cross-prefix=aarch64-unknown-linux-ohos- \
          --cc="$CC" \
          --host-cc="/usr/bin/cc" \
          --extra-cflags="-target aarch64-unknown-linux-ohos --sysroot=${SYSROOT}" \
          --extra-ldflags="-target aarch64-unknown-linux-ohos --sysroot=${SYSROOT}" \
          -Db_staticpic=true \
          -Db_pie=false \
          -Ddefault_library=static \
          -Dtools=disabled \
          --enable-tcg \
          --enable-vnc \
          --enable-vnc-jpeg \
          --enable-vnc-png \
          --enable-vnc-sasl \
          --enable-slirp \
          --enable-curl \
          --enable-fdt \
          --enable-guest-agent \
          --enable-vhost-user \
          --enable-vhost-user-blk-server \
          --enable-libvduse \
          --enable-vduse-blk-export \
          --enable-vhost-net \
          --enable-vhost-kernel \
          --enable-keyring \
          --disable-kvm \
          --disable-xen \
          --disable-werror
        
        # Build QEMU
        echo "Building QEMU..."
        make -j$(nproc)
        
        # Verify build results
        echo "=== Build Verification ==="
        if [ ! -f "libqemu-aarch64-softmmu.a" ]; then
          echo "❌ Error: libqemu-aarch64-softmmu.a not found"
          exit 1
        fi
        
        if [ ! -f "libqemuutil.a" ]; then
          echo "❌ Error: libqemuutil.a not found"
          exit 1
        fi
        
        echo "✅ QEMU static libraries built successfully"
        
        # Show build results
        echo "=== Build Results ==="
        ls -la *.a
        du -h *.a

    - name: Create QEMU Shared Library
      shell: bash
      run: |
        echo "=== Creating QEMU Shared Library ==="
        
        cd third_party/qemu/build_shared_libs
        
        # Create shared library for HarmonyOS
        $CXX -shared -fPIC -Wl,--no-undefined \
          -target aarch64-unknown-linux-ohos --sysroot=${SYSROOT} \
          -Wl,--whole-archive \
          libqemu-aarch64-softmmu.a \
          libqemuutil.a \
          -Wl,--no-whole-archive \
          -lpthread -ldl -lm -lz \
          -o libqemu_full.so
        
        # Strip debug symbols
        $STRIP -S libqemu_full.so
        
        # Verify the shared library
        if [ ! -f "libqemu_full.so" ]; then
          echo "❌ Error: libqemu_full.so not created"
          exit 1
        fi
        
        echo "✅ libqemu_full.so created successfully"
        file libqemu_full.so
        du -h libqemu_full.so

    - name: Build NAPI Module
      shell: bash
      run: |
        echo "=== Building NAPI Module ==="
        
        cd entry/src/main/cpp
        
        # Create build directory
        rm -rf build
        mkdir -p build
        cd build
        
        # Configure with CMake
        echo "Configuring NAPI module..."
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_SYSTEM_NAME=Linux \
          -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
          -DCMAKE_C_COMPILER="$CC" \
          -DCMAKE_CXX_COMPILER="$CXX" \
          -DCMAKE_AR="$AR" \
          -DCMAKE_STRIP="$STRIP" \
          -DCMAKE_RANLIB="$RANLIB" \
          -DCMAKE_SYSROOT="$SYSROOT" \
          -DCMAKE_FIND_ROOT_PATH="$SYSROOT" \
          -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
          -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
          -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY
        
        # Build NAPI module
        echo "Building NAPI module..."
        make -j$(nproc)
        
        # Verify NAPI module
        if [ ! -f "libqemu_hmos.so" ]; then
          echo "❌ Error: libqemu_hmos.so not created"
          exit 1
        fi
        
        echo "✅ NAPI module built successfully"
        file libqemu_hmos.so
        du -h libqemu_hmos.so

    - name: Copy Libraries to Target Directories
      shell: bash
      run: |
        echo "=== Copying Libraries ==="
        
        # Create target directories
        mkdir -p entry/src/main/libs/arm64-v8a
        mkdir -p entry/src/main/oh_modules
        
        # Copy QEMU shared library
        cp third_party/qemu/build_shared_libs/libqemu_full.so entry/src/main/libs/arm64-v8a/
        cp third_party/qemu/build_shared_libs/libqemu_full.so entry/src/main/oh_modules/
        
        # Copy NAPI module
        cp entry/src/main/cpp/build/libqemu_hmos.so entry/src/main/libs/arm64-v8a/
        
        echo "✅ Libraries copied successfully"
        
        # Show final results
        echo "=== Final Results ==="
        ls -la entry/src/main/libs/arm64-v8a/
        du -h entry/src/main/libs/arm64-v8a/*
        file entry/src/main/libs/arm64-v8a/*
        
        echo ""
        echo "=== Library Information ==="
        echo "libqemu_full.so: QEMU核心功能库，包含虚拟机引擎"
        echo "libqemu_hmos.so: NAPI模块，用于ArkTS调用QEMU功能"
        echo ""
        echo "这些库文件可以集成到HarmonyOS应用中，通过NAPI调用QEMU功能"

    - name: Upload Build Results
      uses: actions/upload-artifact@v4
      with:
        name: qemu-shared-libs
        path: |
          entry/src/main/libs/arm64-v8a/
          entry/src/main/oh_modules/
        retention-days: 7
